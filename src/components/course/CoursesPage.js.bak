import React  from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import * as courseActions from '../../actions/courseActions';
import { prototype } from 'stream';
import {bindActionCreators} from 'redux';
class CoursePage extends React.Component{
    constructor(props,context){
        super(props,context);
        this.state= {
            course:  {title: ""}
        };
        this.onTitleChange= this.onTitleChange.bind(this);
        this.onClickSave= this.onClickSave.bind(this);
    }
    onTitleChange(event){
        const Course = this.state.course;
        Course.title = event.target.value;
        this.setState({course: Course});
        
    }  
    onClickSave(){
       // alert(`Saving ${this.state.course.title}`);
       // this is one way to move event to react flow
      // this.props.dispatch(courseActions.createCourse(this.state.course));
      // this is second
      this.props.actions.createCourse(this.state.course);
    }
    coureseRow(course, index){
        return <div key={index}>{course.title}</div>;
    }
    render(){
        return(
            <div>
                <h1>Courses</h1>
                {this.props.courses.map(this.coureseRow)}
                <h2>Add Courses</h2>
                <input 
                    type="text"
                    onChange ={this.onTitleChange}
                    value= {this.state.course.title}/>
                <input 
                    type="submit"
                    onClick = {this.onClickSave}
                    value= "Save"/>
            </div>
        );
    }
}

// CoursePage.propTypes ={
//    // dispatch: PropTypes.func.isRequired,
//     courses: PropTypes.Array.isRequired,
//     actions: PropTypes.object.isRequired
//     //createCourse: PropTypes.func.isrequired
// };



function mapStateToProps(state,ownprops){
    return{
        courses : state.courses 
    };
}

// second way to trigger action from React component to Redux
// function mapDispatchToProps(dispatch){
//     return {
//         createCourse: (course)=> dispatch(courseActions.createCourse(course))
//     };

// }

//third way is 
function mapDispatchToProps(dispatch){
    return {
        actions: bindActionCreators(courseActions ,dispatch)
    };

}


export default connect(mapStateToProps, mapDispatchToProps)(CoursePage); // wraps courese page